priority -20

global !p
import os
from vimsnippets import complete

FIELD_TYPES = [
'character',
'data.frame',
'integer',
'list',
'logical',
'matrix',
'numeric',
'vector']
endglobal

snippet #! "Hashbang for Rscript (#!)" b
#!/usr/bin/env Rscript
endsnippet

snippet setwd "Set workingdir" b
setwd("${1:`!p snip.rv = os.getcwd()`}")
endsnippet

snippet as "Apply type on variable" w
as.$1`!p snip.rv = complete(t[1], FIELD_TYPES)`($2${VISUAL})
endsnippet

snippet is "Test type on variable" w
is.$1`!p snip.rv = complete(t[1], FIELD_TYPES)`($2${VISUAL})
endsnippet

snippet dl "Download and install a package" b
download.file("${1:${VISUAL:url to package}}", destfile = "${2:${1/.*\/(\S*)$/(?1:$1)/ga}}")
install.packages("$2", type = "source", repos = NULL)
library("${3:${2/^(\w+)_.*$/(?1:$1)/ga}}")
endsnippet

snippet lib "Import a library"
library('${0:${VISUAL:package}}')
endsnippet

snippet req "Require a file"
require('${0:${VISUAL:package}}')
endsnippet

snippet source "Source a file"
source('${0:${VISUAL:file}}')
endsnippet

snippet if "If statement"
if ($1) {
	${0:${VISUAL}}
}
endsnippet

snippet eif "Else-If statement"
else if ($1) {
	${0:${VISUAL}}
}
endsnippet

snippet el "Else statement"
else {
	${0:${VISUAL}}
}
endsnippet

snippet ife "if .. else"
if ($1) {
	${2:${VISUAL}}
} else {
	$0
}
endsnippet

snippet wh "while loop"
while($1) {
	${0:${VISUAL}}
}
endsnippet

snippet for "for loop"
for (${1:item} in ${2:list}) {
	${0:${VISUAL}}
}
endsnippet

snippet fun "Function definition"
${1:name} <- function ($2) {
	${0:${VISUAL}}
}
endsnippet

snippet ret "Return call"
return(${0:${VISUAL}})
endsnippet

snippet df "Data frame"
${1:name}[${2:rows}, ${0:cols}]
endsnippet

snippet c "c function"
c(${0:${VISUAL:items}})
endsnippet

snippet li "list function"
list(${0:${VISUAL:items}})
endsnippet

snippet mat "matrix function"
matrix(${1:${VISUAL:data}}, nrow = ${2:rows}, ncol = ${0:cols})
endsnippet

snippet apply "apply function"
apply(${1:${VISUAL:array}}, ${2:margin}, ${0:function})
endsnippet

snippet lapply "lapply function"
lapply(${1:${VISUAL:list}}, ${0:function})
endsnippet

snippet sapply "sapply function"
sapply(${1:${VISUAL:list}}, ${0:function})
endsnippet

snippet vapply "vapply function"
vapply(${1:${VISUAL:list}}, ${2:function}, ${0:type})
endsnippet

snippet mapply "mapply function"
mapply(${1:${VISUAL:function}}, ${0:...})
endsnippet

snippet tapply "tapply function"
tapply(${1:${VISUAL:vector}}, ${2:index}, ${0:function})
endsnippet

snippet rapply "rapply function"
rapply(${1:${VISUAL:list}}, ${0:function})
endsnippet

snippet pl "Plot function"
plot(${1:${VISUAL:x}}, ${0:y})
endsnippet

snippet ggp "ggplot2 plot"
ggplot(${1:${VISUAL:data}}, aes(${0:aesthetics}))
endsnippet

snippet fis "Fisher test"
fisher.test(${1:x}, ${0:y})
endsnippet

snippet chi "Chi Squared test"
chisq.test(${1:x}, ${0:y})
endsnippet

snippet tt "t-test"
t.test(${1:x}, ${0:y})
endsnippet

snippet wil "Wilcox test"
wilcox.test(${1:x}, ${0:y})
endsnippet

snippet cor "Correlation test"
cor.test(${1:x}, ${0:y})
endsnippet

snippet fte "FTE test"
var.test(${1:x}, ${0:y})
endsnippet

snippet kvt "KV test"
kv.test(${1:x}, ${0:y})
endsnippet

#################################
#  easily create string vector  #
#################################
# Given individual words separated by spaces
# Select words (e.g. shift-v for whole line (such as the line above)
# then press <Tab> then type "vec", press <Tab> again to get this:
# var <- c("#","Given","individual","words","separated","by","spaces")
# var <- c("#","type","out","individual","words","separated","by","spaces")
snippet vec
${1:var} <- c("${0:${VISUAL:/ /","/g}}")
endsnippet

snippet argparser
library(argparser)
p <- arg_parser("Round a floating point number")
p <- add_argument(p, "number", help="number to round", type="numeric")
p <- add_argument(p, "digits", help="number of decimal places", default=0)
argv <- parse_args(p)
endsnippet

snippet docopt "command line arguments"
'Program Name.

Usage:
   $1 ship new <name>...
   $1 ship <name> move <x> <y> [--speed=<kn>]
   $1 ship shoot <x> <y>
   $1 mine (set|remove) <x> <y> [--moored|--drifting]
   $1 -h | --help
   $1 --version

Options:
  -h --help     Show this screen.
  --version     Show version.
  --speed=<kn>  Speed in knots [default: 10].
  --moored      Moored (anchored) mine.
  --drifting    Drifting mine.
' -> doc

library(docopt)
arguments <- docopt(doc, version = 'VersionNumber')

endsnippet


snippet mkdir "mkdir in R"
$1 = file.path(1,2)
if (!dir.exists($1)) {
  dir.create($1, recursive = TRUE)
}
endsnippet

snippet s4 "create s4 class with docs"
#' An S4 class to represent a bank account
#'
#' @slot $2 A length-one numeric vector
#' @importClassesFrom package ClassA ClassB
#' @importMethodsFrom package GenericA GenericB
$1 <- setClass("$1",
  slots = list($2 = "numeric")
)
endsnippet

snippet s3 "create s3 with docs"
#' 36L: This is the title.
#'
#' @description
#' This is the description.
#'
#' @details
#' These are further details.
#'
#' @param x desc
#' @param y desc
#' @return Returns ddf
#'
#' @rdname $1
#' @concept dfgd
#' @importFrom pkg fun
#' @export $1
#'
#' @examples
#' add_numbers(1, 2) ## returns 3
#'
#' ## don't run this in calls to 'example(add_numbers)'
#' \dontrun{
#'    $1(2, 3)
#' }
#'
$1 <- function(x, ...) {
  UseMethod(generic = '$1', object = x)
}

endsnippet

snippet s3detail "detail implemention of s3 method"
#' @param x desc
#' @rdname $1
#' @importFrom pkg fun
#' @export
#' @method $1 default
#' @concept integration
#'
$1.default <- function(
  anchors,
  vars = NULL,
  ...
) {
  ...
}
endsnippet


snippet fn "function with docs"
#' 36L: This is the title.
#'
#' @description
#' This is the description.
#'
#' @details
#' These are further details.
#'
#' @section A Custom Section:
#'
#' Text accompanying the custom section. `r 2 + 2`
#'
#' @param x desc
#' @param y desc
#' @return Returns dsfsf
#'
#' @rdname file
#' @importFrom pkg fun
#' @export
#'
#' @seealso [prod()] for products, [cumsum()] for cumulative sums, and
#'   [colSums()]/[rowSums()] marginal sums over high-dimensional arrays.
#'
#' @examples
#' add_numbers(1, 2) ## returns 3
#'
#' ## don't run this in calls to 'example(add_numbers)'
#' \dontrun{
#'    $1(2, 3)
#' }
#'
#' ## don't test this during 'R CMD check'
#' \donttest{
#'    $1(4, 5)
#' }
$1 <- function(x, y) {
     x + y
}
endsnippet

snippet doc "script docs"
#' Package Name
#'
#' Package description.
#'
#' @docType package
#' @name <package-name>
#' @import assertthat
#' @importFrom utils head tail
#' @useDynLib <c-package-name>
#'
#' @references
#'
endsnippet

snippet data "dataset with docs"
#' Prices of 50,000 round cut diamonds.
#'
#' A dataset containing the prices and other attributes of almost 54,000
#' diamonds.
#'
#' @format A data frame with 53940 rows and 10 variables:
#' \describe{
#'   \item{price}{price, in US dollars}
#'   \item{carat}{weight of the diamond, in carats}
#'   ...
#' }
#' @source \url{http://www.diamondse.info/}
#' $1
endsnippet

snippet checkinstall "check if the packages are installed"
if (!requireNamespace(c('$1'), quietly = TRUE)) {
  stop("Cannot find $1", call. = FALSE)
}
endsnippet

snippet include "include other scripts in r package"
#' @include generics.R
#' @import pkg
#' @importFrom pkg fun1 fun2
NULL

endsnippet
