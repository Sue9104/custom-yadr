#######################################################################
#                            TOML Snippets                            #
#######################################################################

snippet create_table "create table"
create table if not exists $1 (
	$2  TEXT  NOT NULL,
	$3  TEXT  NOT NULL
);
endsnippet

snippet create_schema "create schema"
create schema if not exists $1;
endsnippet

snippet create_function "create function"
	create or replace function $1(arg1 TEXT, arg2 TEXT) RETURNS BOOLEAN AS $$
	DECLARE arg BOOLEAN;
	BEGIN
		...
	RETURN arg;
	END $$  LANGUAGE plpgsql;
endsnippet

snippet create_procedure "create procedure"
	create or replace procedure $1(arg1 TEXT, arg2 TEXT) AS $$
	DECLARE arg BOOLEAN;
	BEGIN
		...
	END $$  LANGUAGE plpgsql;
endsnippet

snippet create_view "create view"
	create or replace view $1 () as
	select ;
endsnippet

snippet create_materialized_view "create materialized view"
	create materialized view $1 () as
	select
	with no data;
endsnippet

snippet revert_view "revert view"
drop view $1;
endsnippet

snippet revert_materialized_view "revert materialized view"
drop materialized view $1;
endsnippet

snippet revert_table "revert table"
drop table $1;
endsnippet

snippet revert_schema "revert schema"
drop schema $1;
endsnippet

snippet revert_function "revert function"
drop function $1;
endsnippet

snippet verify_schema "verify schema"
select has_schema_privilege('$1','usage');
endsnippet

snippet verify_table "verify table"
select has_table_privilege('$1','select');
select id from $1 where false;
endsnippet

snippet verify_function "verify function"
select has_function_privilege('$1','execute');
endsnippet

snippet test_schema "test schema"
select has_schema('$1');
endsnippet

snippet test_table "test table"
set search_path to $1,public;
select has_table('$2');
select has_has_column('$2', '$3');
select col_type_is('$2', '$3', 'text');
select col_not_null('$2', '$3');
select col_hasnt_defalut('$2', '$3');
select col_default_is('$2', '$3', 'value');
endsnippet

snippet test_function "test function"
select has_function( '$1' );
select has_function( '$1', $2 );
select has_function_lang_is( '$1', $2, 'sql' );
select has_function_returns( '$1', $3, 'void' );
select lives_ok(
	$$ select funct() $$,
	'function ok'
);
select throws_ok(
	$$ select funct() $$,
	23505, -- duplicate key violation
	null, -- localize err message
	'should get an err for duplicate name'
);
select row_eq(
	'select * from table users',
	ROW(a,b)::users,
	'the users show has been insert'
);
select has_function( '$1' );
select has_function( '$1' );
select has_function( '$1' );
select has_function( '$1' );
select has_function( '$1' );
endsnippet
# vim:ft=snippets:
