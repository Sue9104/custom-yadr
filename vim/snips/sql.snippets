#######################################################################
#                            TOML Snippets                            #
#######################################################################

snippet create_table "create table"
CREATE TABLE IF NOT EXISTS $1 (
	$2  TEXT  NOT NULL,
	$3  TEXT  NOT NULL
);
endsnippet

snippet create_schema "create schema"
CREATE SCHEMA IF NOT EXISTS $1;
endsnippet

snippet create_function "create function"
CREATE OR REPLACE FUNCTION $1(arg1 TEXT, arg2 TEXT) RETURNS BOOLEAN AS $$
	DECLARE arg BOOLEAN;
	BEGIN
		...
	RETURN arg;
	END $$  LANGUAGE plpgsql;
endsnippet

snippet create_procedure "create procedure"
CREATE OR REPLACE PROCEDURE $1(arg1 TEXT, arg2 TEXT) AS $$
	DECLARE arg BOOLEAN;
	BEGIN
		...
	END $$  LANGUAGE plpgsql;
endsnippet

snippet create_view "create view"
	CREATE OR REPLACE VIEW $1 () AS
	SELECT ;
endsnippet

snippet create_materialized_view "create materialized view"
	CREATE MATERIALIZED VIEW $1 () AS
	SELECT
	WITH NO DATA;
endsnippet

snippet revert_view "revert view"
DROP VIEW $1;
endsnippet

snippet revert_materialized_view "revert materialized view"
DROP MATERIALIZED VIEW $1;
endsnippet

snippet revert_table "revert table"
DROP TABLE $1;
endsnippet

snippet revert_schema "revert schema"
DROP SCHEMA $1;
endsnippet

snippet revert_function "revert function"
DROP FUNCTION $1;
endsnippet

snippet verify_schema "verify schema"
SELECT has_schema_privilege('$1','USUAGE');
endsnippet

snippet verify_table "verify table"
SELECT has_table_privilege('$1','SELECT');
SELECT has_column_privilege('$1', '$2', 'SELECT');
SELECT has_type_privilege('$3', 'SELECT');
endsnippet

snippet verify_function "verify function"
SELECT has_function_privilege('func_name(TEXT, TEXT)','EXECUTE');
endsnippet

snippet test_schema "test schema"
SELECT has_schema('$1');
endsnippet

snippet test_table "test table"
SELECT has_table('$2');
SELECT has_pk('$2');

SELECT col_is_unique('$2', '$3');
SELECT col_type_is('$2', '$3', 'text');
SELECT col_not_null('$2', '$3');
SELECT col_default_is('$2', '$3', 'value');

endsnippet

snippet test_function "test function"
-- SELECT has_function( 'insert_user', ARRAY['text', 'text']);
SELECT has_function( '$1', $2 );
-- SELECT has_function_returns( 'insert_user', ARRAY['text', 'text'], 'void' );
SELECT has_function_returns( '$1', $3, 'void' );
SELECT lives_ok(
	$$ SELECT $1('','') $$,
	'function ok' -- descript
);
SELECT throws_ok(
	$$ select funct() $$,
	23505, -- postgresql error code
	null, -- error message
	'should get an err for duplicate name' -- description
);
SELECT row_eq(
	$$ select * from table users $$,
	ROW(a,b),
	'the users show has been insert'
);
endsnippet
# vim:ft=snippets:
