#######################################################################
#                            Rust Snippets                            #
#######################################################################

priority -50

snippet let "let variable declaration" b
let ${1:name}${2:: ${3:type}} = $4;
endsnippet

snippet letm "let mut variable declaration" b
let mut ${1:name}${2:: ${3:type}} = $4;
endsnippet

snippet fn "A function, optionally with arguments and return type."
fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet pfn "A public function, optionally with arguments and return type."
pub fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet arg "Function Arguments" i
${1:a}: ${2:T}${3:, arg}
endsnippet

snippet || "Closure, anonymous function (inline)" i
${1:move }|$2| { $3 }
endsnippet

snippet |} "Closure, anonymous function (block)" i
${1:move }|$2| {
	$3
}
endsnippet

snippet pri "print!(..)" b
print!("$1"${2/..*/, /}$2);
endsnippet

snippet pln "println!(..)" b
println!("$1"${2/..*/, /}$2);
endsnippet

snippet fmt "format!(..)"
format!("$1"${2/..*/, /}$2);
endsnippet

snippet macro "macro_rules!" b
macro_rules! ${1:name} {
	(${2:matcher}) => (
		$3
	)
}
endsnippet

snippet mod "A module" b
mod ${1:`!p snip.rv = snip.basename.lower() or "name"`} {
	${VISUAL}$0
}
endsnippet

snippet for "for .. in .." b
for ${1:i} in $2 {
	${VISUAL}$0
}
endsnippet

snippet todo "A Todo comment"
// [TODO]: ${1:Description} - `!v strftime("%Y-%m-%d %I:%M%P")`
endsnippet

snippet st "Struct" b
struct ${1:`!p snip.rv = snip.basename.title() or "Name"`} {
	${VISUAL}$0
}
endsnippet

# TODO: fancy dynamic field mirroring like Python slotclass
snippet stn "Struct with new constructor." b
pub struct ${1:`!p snip.rv = snip.basename.title() or "Name"`} {
	fd$0
}

impl $1 {
	pub fn new($2) -> $1 {
		$1 { $3 }
	}
}
endsnippet

snippet fd "Struct field definition" w
${1:name}: ${2:Type},
endsnippet

snippet impl "Struct/Trait implementation" b
impl ${1:Type/Trait}${2: for ${3:Type}} {
	$0
}
endsnippet

snippet error_chain "error_chain"
#![recursion_limit = "1024"]
#[macro_use]
extern crate error_chain;
mod errors {
  error_chain!{
	  foreign_links {
		  Io(::std::io::Error) #[cfg(unix)];
		}
	}
}

use errors::*;
endsnippet

snippet csv_header "extern crate for csv"
extern crate csv;
#[macro_use] extern crate serde_derive;
endsnippet

snippet serde_derive "derserialize derive header"
#[derive(Serialize, Deserialize, Debug)]
endsnippet

snippet debug_derive "derive debug"
#[derive(Debug)]
endsnippet

snippet hash "use hash"
use std::collections::HashMap;
endsnippet

snippet include_bytes "include_bytes to global value"
static $1: &[u8] = include_bytes!("$2");
endsnippet

snippet rdr "csv ReaderBuilder"
	let mut rdr = csv::ReaderBuilder::new()
		.has_headers(true)
		.comment(Some(b'#'))
		.delimiter(b',')
		.from_path($1)?;
endsnippet

snippet wtr "csv WriterBuilder"
	let mut wtr = csv::WriterBuilder::new().from_path($1)?;
endsnippet

snippet de "deserialize"
deserialize
endsnippet

snippet clap "clap example"
extern crate clap;
use clap::{Arg, App};

fn main() {
	let matches = App::new("$1 Program")
									.version("1.0")
									.author("Min Su <sumin@cheerlandgroup.com>")
									.about("$2")
									.arg(Arg::with_name("config")
										.short("c")
										.long("config")
										.value_name("FILE")
										.help("Sets a custom config file")
										.takes_value(true)
										.default_value("aa"))
									.arg(Arg::with_name("step")
										.short("s")
										.long("step")
										.value_name("STEP")
										.help("Sets a custom config file")
										.takes_value(true)
										.use_delimiter(true)
										.value_delimiter(","))
									.arg(Arg::with_name("INPUT")
										.help("Sets the input file to use")
										.required(true)
										.index(1))
									.get_matches();

	let config = matches.value_of("config").unwrap();
	let step: Vec<_> = matches.values_of("step").unwrap().collect::<Vec<_>>();
	let infile = matches.value_of("INPUT").unwrap();

}
endsnippet

snippet log "extern crate log"
#[macro_use] extern crate log;
extern crate env_logger;
endsnippet

snippet command "run command"

use std::process;

	let output = process::Command::new("$1")
		.env("PATH", $2)
		.args(&["$3", "$4"])
		.output()
		.chain_err(|| "failed to run command");
	if output.status.success(){
		Ok(())
	} else {
		bail!( String::from_utf8(output.stderr).unwrap() )
	}
endsnippet
# vim:ft=snippets:
